/* tslint:disable */
/* eslint-disable */
/**
 * Migration Planner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: undefined
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PresignedUrl,
} from '../models/index';
import {
    PresignedUrlFromJSON,
    PresignedUrlToJSON,
} from '../models/index';

export interface GetImageRequest {
    id: string;
}

export interface GetSourceDownloadURLRequest {
    id: string;
}

export interface HeadImageRequest {
    id: string;
}

/**
 * ImageApi - interface
 * 
 * @export
 * @interface ImageApiInterface
 */
export interface ImageApiInterface {
    /**
     * Get the OVA image
     * @param {string} id id of the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Get the OVA image
     */
    getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * Get the OVA image via URL
     * @param {string} id Source id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    getSourceDownloadURLRaw(requestParameters: GetSourceDownloadURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PresignedUrl>>;

    /**
     * Get the OVA image via URL
     */
    getSourceDownloadURL(requestParameters: GetSourceDownloadURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PresignedUrl>;

    /**
     * Head the OVA image
     * @param {string} id Id of the source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    headImageRaw(requestParameters: HeadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Head the OVA image
     */
    headImage(requestParameters: HeadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI implements ImageApiInterface {

    /**
     * Get the OVA image
     */
    async getImageRaw(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sources/{id}/image`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Get the OVA image
     */
    async getImage(requestParameters: GetImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the OVA image via URL
     */
    async getSourceDownloadURLRaw(requestParameters: GetSourceDownloadURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PresignedUrl>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSourceDownloadURL().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sources/{id}/image-url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PresignedUrlFromJSON(jsonValue));
    }

    /**
     * Get the OVA image via URL
     */
    async getSourceDownloadURL(requestParameters: GetSourceDownloadURLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PresignedUrl> {
        const response = await this.getSourceDownloadURLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head the OVA image
     */
    async headImageRaw(requestParameters: HeadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling headImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sources/{id}/image`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Head the OVA image
     */
    async headImage(requestParameters: HeadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.headImageRaw(requestParameters, initOverrides);
    }

}
