/* tslint:disable */
/* eslint-disable */
/**
 * Migration Planner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: undefined
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Assessment,
  AssessmentForm,
  AssessmentUpdate,
} from '../models/index';
import {
    AssessmentFromJSON,
    AssessmentFormToJSON,
    AssessmentUpdateToJSON,
} from '../models/index';

export interface CreateAssessmentRequest {
    assessmentForm: AssessmentForm;
}

export interface DeleteAssessmentRequest {
    id: string;
}

export interface GetAssessmentRequest {
    id: string;
}

export interface UpdateAssessmentRequest {
    id: string;
    assessmentUpdate: AssessmentUpdate;
}

/**
 * AssessmentApi - interface
 * 
 * @export
 * @interface AssessmentApiInterface
 */
export interface AssessmentApiInterface {
    /**
     * Create an assessment
     * @param {AssessmentForm} assessmentForm 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApiInterface
     */
    createAssessmentRaw(requestParameters: CreateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>>;

    /**
     * Create an assessment
     */
    createAssessment(requestParameters: CreateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment>;

    /**
     * Delete an assessment
     * @param {string} id ID of the assessment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApiInterface
     */
    deleteAssessmentRaw(requestParameters: DeleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>>;

    /**
     * Delete an assessment
     */
    deleteAssessment(requestParameters: DeleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment>;

    /**
     * Get the specified assessment
     * @param {string} id ID of the assessment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApiInterface
     */
    getAssessmentRaw(requestParameters: GetAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>>;

    /**
     * Get the specified assessment
     */
    getAssessment(requestParameters: GetAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment>;

    /**
     * List assessments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApiInterface
     */
    listAssessmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Assessment>>>;

    /**
     * List assessments
     */
    listAssessments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Assessment>>;

    /**
     * Update an assessment
     * @param {string} id ID of the assessment
     * @param {AssessmentUpdate} assessmentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssessmentApiInterface
     */
    updateAssessmentRaw(requestParameters: UpdateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>>;

    /**
     * Update an assessment
     */
    updateAssessment(requestParameters: UpdateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment>;

}

/**
 * 
 */
export class AssessmentApi extends runtime.BaseAPI implements AssessmentApiInterface {

    /**
     * Create an assessment
     */
    async createAssessmentRaw(requestParameters: CreateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>> {
        if (requestParameters['assessmentForm'] == null) {
            throw new runtime.RequiredError(
                'assessmentForm',
                'Required parameter "assessmentForm" was null or undefined when calling createAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assessments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssessmentFormToJSON(requestParameters['assessmentForm']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessmentFromJSON(jsonValue));
    }

    /**
     * Create an assessment
     */
    async createAssessment(requestParameters: CreateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment> {
        const response = await this.createAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an assessment
     */
    async deleteAssessmentRaw(requestParameters: DeleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assessments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessmentFromJSON(jsonValue));
    }

    /**
     * Delete an assessment
     */
    async deleteAssessment(requestParameters: DeleteAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment> {
        const response = await this.deleteAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the specified assessment
     */
    async getAssessmentRaw(requestParameters: GetAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assessments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessmentFromJSON(jsonValue));
    }

    /**
     * Get the specified assessment
     */
    async getAssessment(requestParameters: GetAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment> {
        const response = await this.getAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List assessments
     */
    async listAssessmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Assessment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/assessments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssessmentFromJSON));
    }

    /**
     * List assessments
     */
    async listAssessments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Assessment>> {
        const response = await this.listAssessmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update an assessment
     */
    async updateAssessmentRaw(requestParameters: UpdateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Assessment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAssessment().'
            );
        }

        if (requestParameters['assessmentUpdate'] == null) {
            throw new runtime.RequiredError(
                'assessmentUpdate',
                'Required parameter "assessmentUpdate" was null or undefined when calling updateAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/assessments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssessmentUpdateToJSON(requestParameters['assessmentUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessmentFromJSON(jsonValue));
    }

    /**
     * Update an assessment
     */
    async updateAssessment(requestParameters: UpdateAssessmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Assessment> {
        const response = await this.updateAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
