/* tslint:disable */
/* eslint-disable */
/**
 * Migration Planner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: undefined
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Agent
 */
export interface Agent {
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    status: AgentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    statusInfo: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    credentialUrl: string;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    sourceId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Agent
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Agent
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Agent
     */
    deletedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Agent
     */
    associated: boolean;
    /**
     * 
     * @type {string}
     * @memberof Agent
     */
    version: string;
}


/**
 * @export
 */
export const AgentStatusEnum = {
    NotConnected: 'not-connected',
    WaitingForCredentials: 'waiting-for-credentials',
    Error: 'error',
    GatheringInitialInventory: 'gathering-initial-inventory',
    UpToDate: 'up-to-date',
    SourceGone: 'source-gone'
} as const;
export type AgentStatusEnum = typeof AgentStatusEnum[keyof typeof AgentStatusEnum];


/**
 * Check if a given object implements the Agent interface.
 */
export function instanceOfAgent(value: object): value is Agent {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('statusInfo' in value) || value['statusInfo'] === undefined) return false;
    if (!('credentialUrl' in value) || value['credentialUrl'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('associated' in value) || value['associated'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    return true;
}

export function AgentFromJSON(json: any): Agent {
    return AgentFromJSONTyped(json, false);
}

export function AgentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'status': json['status'],
        'statusInfo': json['statusInfo'],
        'credentialUrl': json['credentialUrl'],
        'sourceId': json['sourceId'] == null ? undefined : json['sourceId'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'deletedAt': json['deletedAt'] == null ? undefined : (new Date(json['deletedAt'])),
        'associated': json['associated'],
        'version': json['version'],
    };
}

export function AgentToJSON(value?: Agent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'status': value['status'],
        'statusInfo': value['statusInfo'],
        'credentialUrl': value['credentialUrl'],
        'sourceId': value['sourceId'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'deletedAt': value['deletedAt'] == null ? undefined : ((value['deletedAt']).toISOString()),
        'associated': value['associated'],
        'version': value['version'],
    };
}

