/* tslint:disable */
/* eslint-disable */
/**
 * Migration Planner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: undefined
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MigrationIssue } from './MigrationIssue';
import {
    MigrationIssueFromJSON,
    MigrationIssueFromJSONTyped,
    MigrationIssueToJSON,
} from './MigrationIssue';
import type { OsInfo } from './OsInfo';
import {
    OsInfoFromJSON,
    OsInfoFromJSONTyped,
    OsInfoToJSON,
} from './OsInfo';
import type { VMResourceBreakdown } from './VMResourceBreakdown';
import {
    VMResourceBreakdownFromJSON,
    VMResourceBreakdownFromJSONTyped,
    VMResourceBreakdownToJSON,
} from './VMResourceBreakdown';

/**
 * 
 * @export
 * @interface VMs
 */
export interface VMs {
    /**
     * 
     * @type {number}
     * @memberof VMs
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof VMs
     */
    totalMigratable: number;
    /**
     * 
     * @type {number}
     * @memberof VMs
     */
    totalMigratableWithWarnings?: number;
    /**
     * 
     * @type {VMResourceBreakdown}
     * @memberof VMs
     */
    cpuCores: VMResourceBreakdown;
    /**
     * 
     * @type {VMResourceBreakdown}
     * @memberof VMs
     */
    ramGB: VMResourceBreakdown;
    /**
     * 
     * @type {VMResourceBreakdown}
     * @memberof VMs
     */
    diskGB: VMResourceBreakdown;
    /**
     * 
     * @type {VMResourceBreakdown}
     * @memberof VMs
     */
    diskCount: VMResourceBreakdown;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof VMs
     */
    powerStates: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof VMs
     * @deprecated
     */
    os: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: OsInfo; }}
     * @memberof VMs
     */
    osInfo?: { [key: string]: OsInfo; };
    /**
     * 
     * @type {Array<MigrationIssue>}
     * @memberof VMs
     */
    notMigratableReasons: Array<MigrationIssue>;
    /**
     * 
     * @type {Array<MigrationIssue>}
     * @memberof VMs
     */
    migrationWarnings: Array<MigrationIssue>;
}

/**
 * Check if a given object implements the VMs interface.
 */
export function instanceOfVMs(value: object): value is VMs {
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('totalMigratable' in value) || value['totalMigratable'] === undefined) return false;
    if (!('cpuCores' in value) || value['cpuCores'] === undefined) return false;
    if (!('ramGB' in value) || value['ramGB'] === undefined) return false;
    if (!('diskGB' in value) || value['diskGB'] === undefined) return false;
    if (!('diskCount' in value) || value['diskCount'] === undefined) return false;
    if (!('powerStates' in value) || value['powerStates'] === undefined) return false;
    if (!('os' in value) || value['os'] === undefined) return false;
    if (!('notMigratableReasons' in value) || value['notMigratableReasons'] === undefined) return false;
    if (!('migrationWarnings' in value) || value['migrationWarnings'] === undefined) return false;
    return true;
}

export function VMsFromJSON(json: any): VMs {
    return VMsFromJSONTyped(json, false);
}

export function VMsFromJSONTyped(json: any, ignoreDiscriminator: boolean): VMs {
    if (json == null) {
        return json;
    }
    return {
        
        'total': json['total'],
        'totalMigratable': json['totalMigratable'],
        'totalMigratableWithWarnings': json['totalMigratableWithWarnings'] == null ? undefined : json['totalMigratableWithWarnings'],
        'cpuCores': VMResourceBreakdownFromJSON(json['cpuCores']),
        'ramGB': VMResourceBreakdownFromJSON(json['ramGB']),
        'diskGB': VMResourceBreakdownFromJSON(json['diskGB']),
        'diskCount': VMResourceBreakdownFromJSON(json['diskCount']),
        'powerStates': json['powerStates'],
        'os': json['os'],
        'osInfo': json['osInfo'] == null ? undefined : (mapValues(json['osInfo'], OsInfoFromJSON)),
        'notMigratableReasons': ((json['notMigratableReasons'] as Array<any>).map(MigrationIssueFromJSON)),
        'migrationWarnings': ((json['migrationWarnings'] as Array<any>).map(MigrationIssueFromJSON)),
    };
}

export function VMsToJSON(value?: VMs | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'total': value['total'],
        'totalMigratable': value['totalMigratable'],
        'totalMigratableWithWarnings': value['totalMigratableWithWarnings'],
        'cpuCores': VMResourceBreakdownToJSON(value['cpuCores']),
        'ramGB': VMResourceBreakdownToJSON(value['ramGB']),
        'diskGB': VMResourceBreakdownToJSON(value['diskGB']),
        'diskCount': VMResourceBreakdownToJSON(value['diskCount']),
        'powerStates': value['powerStates'],
        'os': value['os'],
        'osInfo': value['osInfo'] == null ? undefined : (mapValues(value['osInfo'], OsInfoToJSON)),
        'notMigratableReasons': ((value['notMigratableReasons'] as Array<any>).map(MigrationIssueToJSON)),
        'migrationWarnings': ((value['migrationWarnings'] as Array<any>).map(MigrationIssueToJSON)),
    };
}

